{"componentChunkName":"component---src-templates-post-tsx","path":"/redux/","result":{"data":{"markdownRemark":{"html":"<p>vanilla-javascript로 숫자 증감 기능을 redux로 사용해서 구현해보면서 알아보겠습니다.</p>\n<h1 id=\"redux-설명\" style=\"position:relative;\"><a href=\"#redux-%EC%84%A4%EB%AA%85\" aria-label=\"redux 설명 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>redux 설명</h1>\n<ul>\n<li>리액트에서 사용되는 <em>상태 관리 라이브러리</em>중 하나</li>\n<li>컴포넌트 상태 업테이트 관련 로직을 <em>다른 파일로 분리시켜</em> 효율적으로 관리할 수 있다.</li>\n<li><em>컴포넌트끼리 똑같은 상태를 공유해야 할 때도</em> 여러 컴포넌트를 거치지 않고 손쉽게 상태 값을 전달, 업데이트 할 수 있다.</li>\n<li>\n<p>전역 상태를 관리할때 괸장히 효과적이다. 하지만 리덕스를 사용하는 것이 유일한 해결책은 아니다.<br>\n단순히 전역 상태 관리만 한다면 Context API를 사용하는 것만으로도 충분하다.</p>\n<ul>\n<li>이렇기 때문에 프로젝트의 규모가 클 경우에는 리덕스를 사용하는 편이 좋다.</li>\n<li>코드 유지보수, 작업효율도 극대화해주기 때문</li>\n<li>추가적으로 미들웨어라는 기능을 제공하여 비동기 작업을 효율적으로 관리해준다.</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"redux-세가지-원칙\" style=\"position:relative;\"><a href=\"#redux-%EC%84%B8%EA%B0%80%EC%A7%80-%EC%9B%90%EC%B9%99\" aria-label=\"redux 세가지 원칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>redux 세가지 원칙</h1>\n<p><a href=\"https://redux.js.org/introduction/three-principles\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://redux.js.org/introduction/three-principles</a></p>\n<ul>\n<li>\n<p>한개의 어플리케이션에는 단일 store가 있어야 한다.</p>\n<ul>\n<li>이런상황에서 어플리케이션을 사용하게 쉽게한다.</li>\n<li>서버에서 받아온 데이터들을 클라이언트에 수고 없이 serialized, hydrated할 수 있다.</li>\n<li>debug, inspect하기 쉽다.</li>\n<li>단일 state를 사용합으로 빠른 개발 사이클을 가능하게 한다.</li>\n<li>예전부터 구현하기 힘들었던 몇가지 기능(undo/redo)을 구현하기 쉽게 한다.</li>\n</ul>\n</li>\n<li>\n<p>state는 오직 일기 전용이다.</p>\n<ul>\n<li>state를 바꾸기 위한것은 action을 이용한 방법을 활용해야한다.</li>\n<li>action은 plan object인데 이유는 log, serialized, stored, debugging, testing에서 활용될 목적이기 때문이다.</li>\n</ul>\n</li>\n<li>리듀서는 pure function이다.</li>\n</ul>\n<h1 id=\"redux-용어\" style=\"position:relative;\"><a href=\"#redux-%EC%9A%A9%EC%96%B4\" aria-label=\"redux 용어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>redux 용어</h1>\n<h2 id=\"1-action\" style=\"position:relative;\"><a href=\"#1-action\" aria-label=\"1 action permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. action</h2>\n<ul>\n<li>객체로 표현되는 값</li>\n<li><em>type 필드를 반드시 가지고 있어야 한다.</em></li>\n</ul>\n<h2 id=\"2-action-creator-function\" style=\"position:relative;\"><a href=\"#2-action-creator-function\" aria-label=\"2 action creator function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. action creator function</h2>\n<ul>\n<li>액션 객체를 만들어주는 함수</li>\n<li>함수를를 만들어 액션 객체를 만드는이유\n: 번거로움, 액션을 만드는 과정에서 <em>실수로 정보를 놓칠수도 있는 것을 방지</em>하기 위해서</li>\n</ul>\n<h2 id=\"3-reducer\" style=\"position:relative;\"><a href=\"#3-reducer\" aria-label=\"3 reducer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. reducer</h2>\n<ul>\n<li>변화를 일으키는 함수</li>\n<li>action을 만들어서 발생시키면 <em>reducer가 현재 상태와 전달받은 액션 객체를 파라미터로 받아온다</em>.</li>\n<li>그리고 두 값을 참고하여 <em>새로운 상태를 만들어 반환한다.</em></li>\n</ul>\n<h2 id=\"4-store\" style=\"position:relative;\"><a href=\"#4-store\" aria-label=\"4 store permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. store</h2>\n<ul>\n<li>한 개의 프로젝트는 <em>단 하나의 스토어만 가질 수 있다.</em></li>\n<li>store 안에는 현재 <em>application 상태, reducer가 들어 있다.</em></li>\n<li>그 외에도 dispatch, subscribe과 같은 내장 함수를 가지고 있다.</li>\n</ul>\n<h2 id=\"5-dispatch\" style=\"position:relative;\"><a href=\"#5-dispatch\" aria-label=\"5 dispatch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. dispatch</h2>\n<ul>\n<li>store의 내장 함수중 하나</li>\n<li><em>action을 발생시킨다.</em></li>\n</ul>\n<h2 id=\"6-subscribe\" style=\"position:relative;\"><a href=\"#6-subscribe\" aria-label=\"6 subscribe permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. subscribe</h2>\n<ul>\n<li>store의 내장 함수중 하나</li>\n<li>subscribe 함수 안에 listner함수를 파라미너로 넣어 호출하면, <em>store 상태가 업데이트될 때마다 호출</em> 된다.</li>\n</ul>\n<h1 id=\"redux-전체-코드-설명\" style=\"position:relative;\"><a href=\"#redux-%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C-%EC%84%A4%EB%AA%85\" aria-label=\"redux 전체 코드 설명 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>redux 전체 코드/ 설명</h1>\n<ul>\n<li>전체코드와 함께 설명을 작성함으로 부분 설명한 개념들을 한곳에서 확인 할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// #1. DOM reference 설정</span>\n<span class=\"token keyword\">const</span> add <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> minus <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'minus'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> number <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnumber<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// #2. DOM event 설정</span>\n<span class=\"token comment\">//: event triiger시 dispatch 수행</span>\nadd<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> handleAdd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nminus<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> handleMinus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// #3. actions</span>\n<span class=\"token comment\">// : dispatch에서 사용 됨(reduce에서 에러를 띄워준다. - 만약 dispatch에서 일반상수 사용시 에러러를 띄우지 않는다.)</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">ADD</span> <span class=\"token operator\">=</span> <span class=\"token string\">'ADD'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">MINUS</span> <span class=\"token operator\">=</span> <span class=\"token string\">'MINUS'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// #4. reducer</span>\n<span class=\"token comment\">// : 변화를 일으키는 함수로서 store의 상태가 변경된다.</span>\n<span class=\"token comment\">// : 상태의 불변성을 지켜야 한다.</span>\n<span class=\"token comment\">// : 객체 구조가 복잡해지는 경우 immer 라이브러리를 사용함으로 좀 더 쉽게 리듀서를 작성할 수 있다.</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">countModifier</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> count<span class=\"token punctuation\">,</span> action <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//eg) action = { type: \"MINUS\", count:1 }</span>\n\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'ADD'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'MINUS'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> count <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// #5. store</span>\n<span class=\"token comment\">// : redux lib의 createStore 함수를 이용해서 store를 생성하며 생성시 reducer를 넣어주어야 한다.</span>\n<span class=\"token keyword\">const</span> countStore <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>countModifier<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// #6. dispatch</span>\n<span class=\"token comment\">// : 스토어의 내장객체 dispatch를 이용해서 액션을 발생시킨다.</span>\n<span class=\"token comment\">// : dispatch 함수 내부에서는 액션을 스토어에게 넘깁니다.</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleAdd</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  countStore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token constant\">ADD</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleMinus</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  countStore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token constant\">MINUS</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// #7. subscribe</span>\n<span class=\"token comment\">// : 스토어 상태가 바뀔 때마다 subscribe 함수로 넘겨주는 파라미터 함수를 수행한다.</span>\n<span class=\"token keyword\">const</span> unsubscribe <span class=\"token operator\">=</span> countStore<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>onChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  number<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> countStore<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 구독을 비활성화할 때 함수를 호출</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>countStore<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. DOM reference 설정\n2. DOM event 설정\n- event triiger시 dispatch 수행\n\n3. actions\n- dispatch에서 사용 됨\n(reduce에서 에러를 띄워준다.\n만약 dispatch에서 일반상수 사용시 에러러를 띄우지 않는다.)\n\n4. reducer\n- 변화를 일으키는 함수로서 store의 상태가 변경된다.\n- 상태의 불변성을 지켜야 한다.\n- 객체 구조가 복잡해지는 경우 immer 라이브러리를 사용함으로\n좀 더 쉽게 리듀서를 작성할 수 있다.\n\n5. store\n- redux lib의 createStore 함수를 이용해서 store를 생성하며\n생성시 reducer를 넣어주어야 한다.\n\n6. dispatch\n- 스토어의 내장객체 dispatch를 이용해서 액션을 발생시킨다.\n- dispatch 함수 내부에서는 액션을 스토어에게 넘깁니다.\n\n7. subscribe\n\n- 스토어 상태가 바뀔 때마다 subscribe 함수로 넘겨주는 파라미터 함수를 수행한다.</code></pre></div>\n<h1 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h1>\n<ul>\n<li>redux 공식 문서\n<a href=\"https://redux.js.org/introduction/getting-started\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://redux.js.org/introduction/getting-started</a></li>\n<li>nomadCoders\n<a href=\"https://academy.nomadcoders.co/p/build-a-timer-app-with-react-native-and-redux\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://academy.nomadcoders.co/p/build-a-timer-app-with-react-native-and-redux</a></li>\n<li>리액트를 다루는 기술 16장 - 김민준/길벗</li>\n</ul>","excerpt":"vanilla-javascript로 숫자 증감 기능을 redux로 사용해서 구현해보면서 알아보겠습니다. redux…","tableOfContents":"<ul>\n<li><a href=\"/redux/#redux-%EC%84%A4%EB%AA%85\">redux 설명</a></li>\n<li><a href=\"/redux/#redux-%EC%84%B8%EA%B0%80%EC%A7%80-%EC%9B%90%EC%B9%99\">redux 세가지 원칙</a></li>\n<li>\n<p><a href=\"/redux/#redux-%EC%9A%A9%EC%96%B4\">redux 용어</a></p>\n<ul>\n<li><a href=\"/redux/#1-action\">1. action</a></li>\n<li><a href=\"/redux/#2-action-creator-function\">2. action creator function</a></li>\n<li><a href=\"/redux/#3-reducer\">3. reducer</a></li>\n<li><a href=\"/redux/#4-store\">4. store</a></li>\n<li><a href=\"/redux/#5-dispatch\">5. dispatch</a></li>\n<li><a href=\"/redux/#6-subscribe\">6. subscribe</a></li>\n</ul>\n</li>\n<li><a href=\"/redux/#redux-%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C-%EC%84%A4%EB%AA%85\">redux 전체 코드/ 설명</a></li>\n<li><a href=\"/redux/#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>","fields":{"slug":"/redux/"},"frontmatter":{"title":"redux","date":"Apr 26, 2020","tags":["react"],"keywords":["redux"]}}},"pageContext":{"slug":"/redux/","series":[]}}}