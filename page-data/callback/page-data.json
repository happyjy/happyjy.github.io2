{"componentChunkName":"component---src-templates-post-tsx","path":"/callback/","result":{"data":{"markdownRemark":{"html":"<p>업무중에 setTimeout, 특정 반목문, event callback function 등 특정상황에서 콜백함수 내부에서 this를 바인딩해서 사용하는 경우가 있었는데\n그 경우를 실행 컨텍스트, 제어권에 따라 달라지는 것으로 </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">\t<span class=\"token number\">1</span> 콜백함수란<span class=\"token operator\">?</span>\n\t<span class=\"token number\">2</span> 제어권\n\t\t<span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> 호출시점\n\t\t<span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">2</span> 인자\n\t\t<span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">3</span> <span class=\"token keyword\">this</span>\n\t<span class=\"token number\">3</span> 콜백 함수는 함수다\n\t<span class=\"token number\">4</span> 콜백 함수 내부의 <span class=\"token keyword\">this</span>에 다른 값 바인딩하기\n\t<span class=\"token number\">5</span> 콜백 지옥과 비동기 제어</code></pre></div>\n<h1 id=\"1-콜백함수란\" style=\"position:relative;\"><a href=\"#1-%EC%BD%9C%EB%B0%B1%ED%95%A8%EC%88%98%EB%9E%80\" aria-label=\"1 콜백함수란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1 콜백함수란?</h1>\n<blockquote>\n<p>다른 코드의 인자로 넘겨주는 함수(제어권도 함께 위임)\n콜백함수를 넘겨 받는 코드는 이 콜백 함수를 필요에 따라 적절한 시점에 실행</p>\n</blockquote>\n<h1 id=\"2-제어권\" style=\"position:relative;\"><a href=\"#2-%EC%A0%9C%EC%96%B4%EA%B6%8C\" aria-label=\"2 제어권 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2 제어권</h1>\n<blockquote>\n<p>호출시점, 인자, this 예제를 통해서 알아 보자</p>\n</blockquote>\n<h2 id=\"2-1-호출시점\" style=\"position:relative;\"><a href=\"#2-1-%ED%98%B8%EC%B6%9C%EC%8B%9C%EC%A0%90\" aria-label=\"2 1 호출시점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-1 호출시점</h2>\n<blockquote>\n<p>setInterval에 callback function은 '호출주체, 제어권'은 setInterval이다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">cbFunc</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    conosl<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>count <span class=\"token operator\">></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> timer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>cbFunc<span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"2-2-인자\" style=\"position:relative;\"><a href=\"#2-2-%EC%9D%B8%EC%9E%90\" aria-label=\"2 2 인자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-2 인자</h2>\n<blockquote>\n<p>콜백 함수의 제어권을 넘겨받은 코드는 콜백 함수를 호출할 때 인자에 어떤 값들을 어떤 순서로 넘길 것인지에 대한 제어권을 가진다.</p>\n</blockquote>\n<ul>\n<li>\n<p>callback function의 인자 값은 filter에 의해서 정해졌다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> newArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">idx<span class=\"token punctuation\">,</span> val</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'this sceop'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> val <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>a<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// {a:1, b:2}코드에 대한 설명은 아래 2-3 this설명에서 알 수 있다.</span></code></pre></div>\n</li>\n</ul>\n<p>console.log(newArr);    //[4,5]</p>\n<p>/*\nthis sceop: {a: 1, b: 2}\nidx: 1\nval: 0</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">this sceop: {a: 1, b: 2}\nidx: 2\nval: 1\n\nthis sceop: {a: 1, b: 2}\nidx: 3\nval: 2\n\nthis sceop: {a: 1, b: 2}\nidx: 4\nval: 3\n\nthis sceop: {a: 1, b: 2}\nidx: 5\nval: 4</code></pre></div>\n<p>*/</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">## 2-3 this\n\n* Array.prototype.map - 구현    \n    ```js\n    Array.prototype.filter = function(callback, thisArg){\n        var mappedArr = [];\n        for(var i=0; i &lt; this.length; i++){\n            var mappedValue = callback.call(thisArg || window, this[i], i , this);  //POINT\n        }\n    }\n    ```\n    * 주석 POINT 설명\n        * thisArg || window  \n            : callback function에서 this의 scope을 명시적으로 바인딩\n            : 이 코드에 의해 filter의 두번째 param으로 callback의 this를 정해줄 수 있다.\n            : 2-2인자 챕터 코드 참고하기\n        * this  \n            : filter를 호출 한 array(이 내용은 prototype과 관련해서 더 설명할 수 있겠다.)  \n        * this[i]  \n            : 이 코드에 의해서 callback function의 첫번째 param array의 i번째 요소\n        * i  \n            : 이 코드에 의해서 callback function의 두번째 param array의 i번째\n    \n# 3 콜백 함수는 함수다\n* 메서드를 콜백함수로 전달한 경우\n    ```js\n    var obj = {\n        vals: [1,2,3],\n        logValues: function(v, i){\n            console.log(this, v, i);\n        }\n    }\n    \n    obj.logValues(10,20); //{vals: Array(3), logValues: f} 10 20\n\n    [10,20,30].forEach(obj.logValues);\n    /*\n        Window{...} 10 0\n        Window{...} 20 1\n        Window{...} 30 2    \n    */\n    ```\n    * forEach의 callback function은 코드에 의해서 호출된 logValues에서 this는 Window를 가르키고 있다.\n        * callback function으로 obj 객체에 의해서 this가 결정되지 않고 별도로 this를 명시하는 인자를 지정하지 않았으므로 함수 내부에서의 this는 전역객체를 가르친다.\n# 4 콜백 함수 내부의 this에 다른 값 바인딩하기\n* 콜백 함수 내부의 this에 따른 값을 바인딩하는 방법 (1/3)\n    ```js\n    var obj1 = {\n        name: &#39;obj1&#39;,\n        func: function() {\n            var me = this;             //POINT\n            return function(){\n                console.log(me.name);\n            };\n        }\n    };\n    var callback = obj1.func();\n    setTimeout(callback, 1000);\n    ```\n    * var me = this;는 closure scope에 등록\n    * setTimeout에 의해서 callback function이 호출 될때 me.name은 excute context에서 me.name 변수를 찾는다.\n    ![callback &amp; scope &amp; clousre](callback&amp;scope&amp;closure.png)\n\n\n* 콜백 함수 내부의 this에 따른 값을 바인딩하는 방법 (2/3)\n    * 예제1에서 만들었던 함수 재활용하는 방법 - cb2 확인해보자\n    ```js\n        var obj1 = {\n            name: &#39;obj1&#39;,\n            func: function() {\n                var me = this;              //POINT: closure\n                return function(p1){\n                    console.log(`${p1}: ${this.name}, ${me.name}`);\n                };\n            }\n        };\n\n        var obj2 = {\n            name: &#39;obj2&#39;,\n            func: obj1.func\n        };\n\n        var cb1 = obj1.func().bind(&quot;&quot;, &#39;cb1&#39;);\n        setTimeout(cb1, 1000);\n\n        var cb2 = obj2.func().bind(&quot;&quot;, &#39;cb2&#39;);\n        setTimeout(cb2, 1500);\n\n        var obj3 = { name: &#39;obj3&#39; }\n        var cb3 = obj1.func().bind(obj3, &#39;cb3&#39;);        //POINT: \n        setTimeout(cb3, 2000);\n\n        /*\n            # 결과\n                * cb1: undefined &quot;obj1&quot; &quot;callback1&quot;\n                * cb2: undefined &quot;obj2&quot; &quot;callback2&quot;\n                * cb3: obj3 obj1 callback3\n        */\n    ```\n\n* 콜백 함수 내부의 this에 따른 값을 바인딩하는 방법 (3/3)\n    * bind로 this를 명시한 function을 사용\n    ```js\n        var obj1 = {\n                name: &#39;obj1&#39;,\n                func: function() {\n                    console.log(this.name)\n                }\n        };\n        \n        setTimeout(obj1.func.bind(obj1), 1000);\n\n        var obj2 = {name:&#39;obj2&#39;};\n        setTimeout(obj1.func.bind(obj2), 1500);\n\n        /*\n            # 결과\n                * obj1\n                * obj2\n        */\n\n    ```\n\n\n\n# 5 콜백 지옥과 비동기 제어\n&gt; 콜백함수를 익명 함수로 전달하는 과정이 반복되어 코드의 들여쓰기 수준이 감당하기 힘들정도로 깊어지는 현상\n&gt; 주로 이벤트 처리, 서버통신과 같은 비동기적인 작업을 수행하기 위해서 이런 형태가 등장\n\n* 동기적인 코드\n    - 현재 실행중인 코드가 완료된 후에야 다음 코드를 실행하는 방식\n* 비동기적인 코드\n    - 현재 실행 중인 코드의 완료 여부와 무관하게 즉시 다음 코드로 넘어간다.\n    - CPU의 계산에 의해 즉시 처리가 가능한 대부분의 코드는 동기적인 코드 \n* 비동기적인 코드가 필요한 경우   \n    : 웹의 복잡도가 높아진 만큼 비동기적인 코드의 비중이 예전보다 훨씬 높아졌다.\n    - 실행대기(setTimeout)  \n        : 사용자의 요청에 의해 특정 시간이 경과되기 전까지 어떤 함수의 실행을 보류\n    - 실행대기(addEventListener)  \n        : 사용자의 직접적인 개입이 있을 때 비로소 어떤 함수를 실행하도록 대기\n    - 보류(XMLhttpRequest)\n        : 웹브라우저 자체가 아닌 별도의 대상에 무어가를 요청하고 그에 대한 응답이 왔을때 비로소 어떤 함수를 실행하도록 대기</code></pre></div>","excerpt":"업무중에 setTimeout, 특정 반목문, event callback function 등 특정상황에서 콜백함수 내부에서 this를 바인딩해서 사용하는 경우가 있었는데\n그 경우를 실행 컨텍스트, 제어권에 따라 달라지는 것으로…","tableOfContents":"<ul>\n<li><a href=\"/callback/#1-%EC%BD%9C%EB%B0%B1%ED%95%A8%EC%88%98%EB%9E%80\">1 콜백함수란?</a></li>\n<li>\n<p><a href=\"/callback/#2-%EC%A0%9C%EC%96%B4%EA%B6%8C\">2 제어권</a></p>\n<ul>\n<li><a href=\"/callback/#2-1-%ED%98%B8%EC%B6%9C%EC%8B%9C%EC%A0%90\">2-1 호출시점</a></li>\n<li><a href=\"/callback/#2-2-%EC%9D%B8%EC%9E%90\">2-2 인자</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/callback/"},"frontmatter":{"title":"callback function","date":"Feb 02, 2020","tags":["javascript","callback"],"keywords":["this","javascript this"]}}},"pageContext":{"slug":"/callback/","series":[]}}}