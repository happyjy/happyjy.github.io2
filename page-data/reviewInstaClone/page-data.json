{"componentChunkName":"component---src-templates-post-tsx","path":"/reviewInstaClone/","result":{"data":{"markdownRemark":{"html":"<h1 id=\"component구조\" style=\"position:relative;\"><a href=\"#component%EA%B5%AC%EC%A1%B0\" aria-label=\"component구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>component구조</h1>\n<ul>\n<li>\n<p>app.js<br>\n: router (Explore, Search, Feed)<br>\n: <u>react-router-dom lib의 'Route, Switch' 사용</u></p>\n<ul>\n<li>Explore</li>\n<li>Search</li>\n<li>\n<p>Feed</p>\n<ul>\n<li>Loading</li>\n<li>\n<p>FeedPhoto</p>\n<ul>\n<li>PhotoActions</li>\n<li>photoComments</li>\n<li>TimeStamp</li>\n<li>CommentBox</li>\n<li>\n<p>UserList : likes 누르면 나오는 팝업</p>\n<ul>\n<li>userDisplay</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"redux-react-설정\" style=\"position:relative;\"><a href=\"#redux-react-%EC%84%A4%EC%A0%95\" aria-label=\"redux react 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>redux-react 설정</h1>\n<ol>\n<li>\n<p>src/index.js</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Provider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">&lt;</span>Provider store<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>App<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span></code></pre></div>\n</li>\n<li>\n<p>src/components/App/index.js</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> connect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Container <span class=\"token keyword\">from</span> <span class=\"token string\">'./container'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> ownProps</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>src/components/presentation.js</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Switch<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Route<span class=\"token operator\">></span> key<span class=\"token operator\">=</span><span class=\"token string\">\"1\"</span> exact path<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Feed<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Switch<span class=\"token operator\">></span></code></pre></div>\n</li>\n<li>\n<p>src/components/Feed/index.js</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> connect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> actionCreators <span class=\"token keyword\">as</span> photoActions <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux/modules/photos'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> ownProps</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> photos<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> feed <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    feed\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapDispatchToProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dispatch<span class=\"token punctuation\">,</span> ownProps</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">getFeed</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>photoActions<span class=\"token punctuation\">.</span><span class=\"token function\">getFeed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">,</span> mapDispatchToProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ol>\n<p>redux 설정</p>\n<ol>\n<li>\n<p>src/index.js</p>\n<ul>\n<li>reacct-redux 라이브러리 Provider로 store설정</li>\n</ul>\n</li>\n<li>\n<p>components/App/index.js</p>\n<ul>\n<li>container.js > presentation.js 호출로 Feed 컴포넌트 호출</li>\n</ul>\n</li>\n<li>\n<p>src/components/Feed/index.js</p>\n<ul>\n<li>Feed > index.js react-redux 설정</li>\n<li>connect: react-redux의 라이브러리에 의해서 props관련 설정/ 설정을 적용할 컴포넌트 설정</li>\n<li>mapDispatchToProps: redux에서 설정한 api를 세팅</li>\n<li>mapStateToProps: mapDispatchToProps에 의해서 변경된 state를 connect에 설정된 컴포넌트에 props로 전달</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"retrieve---feedphoto-컴포넌트-rendering-과정\" style=\"position:relative;\"><a href=\"#retrieve---feedphoto-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-rendering-%EA%B3%BC%EC%A0%95\" aria-label=\"retrieve   feedphoto 컴포넌트 rendering 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>retrieve - FeedPhoto 컴포넌트 rendering 과정</h1>\n<ul>\n<li>\n<p>로그인 후 App/presenter.js > Privateroutes component</p>\n<ul>\n<li>privateRoutes는 Switch로 첫번째 Route는 Feed component 다. </li>\n</ul>\n</li>\n<li>\n<p>Feed Component file<br>\n: index.js, container.js, presenter.js에서 작업이 이뤄짐</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#1. Feed/container.js \n&gt; componentDidMount\n  &gt; this.props.getFeed 호출\n\n#2. Feed/index.js \n&gt; mapDispatchToProps function에 getFeed 호출 \n\n#3. redux/modules/photos.js \n&gt; getFeed &gt; dispatch(setFeed(json)) : dispatch reducer 호출 \n&gt; reducer : applySetFeed 호출 \n&gt; applySetFeed(reducer function) : return data는 mapStateToProps function 첫번째 param으로 전달\n\n#4. Feed/index.js \n&gt; mapStateToProps의 첫번째 parameter로 mapDispatchToProps의 getFeed return value를 받음\n&gt; mapStateToProps function의 return은 component의 props로 사용\n\n#5. Feed/container.js\n&gt; componentWillReceiveProps property\n  : props를 받으면 loading을 false로 설정함으로 Loading component를 제거해준다.\n&gt; render proeprty\n  : this.props.feed로 전달받아 Feed compoennt rendering 하는데 사용 </code></pre></div>\n</li>\n<li>\n<p>componentDidMount function(in container.js)</p>\n<ul>\n<li>componentDidMount은 component가 Mount되고 lifeCycle에 의해서 호출 됨</li>\n<li>componentDidMount에서 this.props.getFeed를 호출 </li>\n<li>props로 getFeed를 사용할 수 있는 이유\n: “react-redux\"의 connect 객체로 인해서 가능</li>\n</ul>\n</li>\n<li>\n<p>mapDispatchToProps(getFeed 수행)(in index.js)  </p>\n<ul>\n<li><u>dispatch에 설정되는 values는 photos.js(redux파일)에 \"api actions\" 이다.</u></li>\n</ul>\n</li>\n<li>\n<p>redux(in photos.js) 작업</p>\n<ul>\n<li>2번에 의해서 Photos.js에서 getFeed \"api actions\"호출 </li>\n<li><u>getFeed success 후 'applySetFeed' reducer functions를 호츨 해 api에서 return한 value를 세팅</u></li>\n</ul>\n</li>\n<li>\n<p>mapStateToProps function(in index.js)</p>\n<ul>\n<li>index.js > mapStateToProps에서 api에서 return한 value를 첫번째 arguments로 받을 수 있다. </li>\n<li><u>이 과정으로 container에서 this.props</u>로 값을 받을 수 있다.\n5.1 componentWillReceiveProps function (in container.js)</li>\n<li>\n<p>윗 단계에서 return한 value를 props로 받을 수 있다. </p>\n<ul>\n<li>index.js에서 'react-redux'를 사용했기에 가능</li>\n</ul>\n</li>\n<li>\n<p>여기서 component loading state를 설정</p>\n<ul>\n<li>Feed > presenter.js에서 LoadingFeed component 제어\n5.2 render function(in container.js)</li>\n</ul>\n</li>\n<li>this.props에 feed가 property로 있다.</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"create---댓글-달기-과정\" style=\"position:relative;\"><a href=\"#create---%EB%8C%93%EA%B8%80-%EB%8B%AC%EA%B8%B0-%EA%B3%BC%EC%A0%95\" aria-label=\"create   댓글 달기 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>create - 댓글 달기 과정</h1>\n<ul>\n<li>\n<p>enter 이후 동작 trace를 아래 순서로 설명합니다. </p>\n<ol>\n<li>event 호출 </li>\n<li>redux </li>\n<li>component 전달과정</li>\n<li>component 구조를 잘 알고 있어야 파악하기 쉽다.</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"event-호출\" style=\"position:relative;\"><a href=\"#event-%ED%98%B8%EC%B6%9C\" aria-label=\"event 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>event 호출</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  #1. CommentBox/presenter.js\n    - Textarea에서 enterEvent 감지\n  #2. CommentBox/container.js \n    &gt; _handleKeyPress 함수 동작 \n      - this.props.submitComment함수에 작성한글(this.state.comment)넘김 \n  #3. CommentBox/index.js \n    &gt; mapDispatchToProp gkatn\n      - return에 적용한 submitComment 필드에 설정한 dispatch가 수행</code></pre></div>\n<h2 id=\"redux\" style=\"position:relative;\"><a href=\"#redux\" aria-label=\"redux permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>redux</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  #1. modules/photos.js (redux)\n    &gt; commentPhoto 함수 &quot;api actions&quot; 수행\n      - dispatch(addComment(photoId, json))에 의해 5번 호출\n  #2. modules/photos.js (redux)\n    &gt; commentPhoto 함수 &quot;reducer&quot;를 수행 \n      - fetch를 통해 서버 통신 이후\n      - applyAddComment 호출\n  #3. modules/photos.js (redux)\n    &gt; applyAddComment 함수 &quot;reducer function&quot;를 수행\n      - 새로운 객체를 만들어 반환\n        * state를 변경하지 않는다. \n        * 반환된 객체는 해당 redux를 사용하는 store에 변환된 객체를 변경할 component를 찾아 dom을 update한다.\n        (현재는 state의 comments가 변경됐음으로 photoComments 컴포넌트가 update된다.)</code></pre></div>\n<h2 id=\"component-전달과정\" style=\"position:relative;\"><a href=\"#component-%EC%A0%84%EB%8B%AC%EA%B3%BC%EC%A0%95\" aria-label=\"component 전달과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>component 전달과정</h2>\n<ol>\n<li>\n<p>src/components/App</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. index.js     : mapStateToProps function\n2. container.js : &lt;App {...props}/&gt;; \n3. presenter.js : &lt;Route key=&#39;1&#39; exact path=&#39;/&#39; component={Feed} /&gt;</code></pre></div>\n</li>\n<li>\n<p>src/components/Feed</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. index.js     : mapStateToProps function\n2. container.js : componentWillReceiveProps function\n3. container.js : render function &gt; Feed compoennt presenter 호출\n4. presenter.js : renderFeed function &gt; FeedPhoto component index 호출</code></pre></div>\n</li>\n<li>\n<p>src/components/FeedPhoto</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. index.js     : mapDispatchToProps\n2. container.js : render function &gt; FeedPhoto component presenter 호출\n3. presenter.js : FeedPhoto function\n    * Feed 화면에서 rendering 하는 component로 &#39;PhotoComments component&#39;를 re rendering 한다.</code></pre></div>\n</li>\n<li>\n<p>src/components/PhotoComments</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. index.js   : Photo Component &gt; Comment function\n    * 이 Component는 보여주는 역할 밖에 없음으로 index.js에 rendering하는 부분만 있다.</code></pre></div>\n</li>\n</ol>\n<h1 id=\"create-delete---like-unlike\" style=\"position:relative;\"><a href=\"#create-delete---like-unlike\" aria-label=\"create delete   like unlike permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>create, delete - like, unlike</h1>\n<blockquote>\n<p>heart 클릭으로 빨간 heart 제거 동작 trace\nlike하는 과정은 unlike하는 과정과 같기때문에 제거하는 것으로 설명</p>\n</blockquote>\n<ul>\n<li>enter 이후 동작 trace를 아래 순서로 설명합니다. </li>\n<li>event 호출 </li>\n<li>redux </li>\n<li>component 전달과정</li>\n<li>component 구조를 잘 알고 있어야 파악하기 쉽다.</li>\n</ul>\n<h2 id=\"event-호출-1\" style=\"position:relative;\"><a href=\"#event-%ED%98%B8%EC%B6%9C-1\" aria-label=\"event 호출 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>event 호출</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">* src/components/PhotoActions\n1. presenter.js &gt; onClick\n    * container에서 전달된 props에 handleHearClick 호출\n2. container.js &gt; presenter \n    * presneter에서 생성한 component에 props 전달(index.js에서 onClick 동작하는 function을 props에 세팅)\n3. index.js &gt; mapDispatchToprops\n    * handleHeartClick 호출\n      - dispatch(photoActions.xxx)에 호출</code></pre></div>\n<h2 id=\"redux-1\" style=\"position:relative;\"><a href=\"#redux-1\" aria-label=\"redux 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>redux</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">* src/redux/modules/photos.js\n1. redux &gt; photos.js &gt; unlikePhoto (api function)\n    * dispatch(doUnlikePhoto(photoId))호출 \n      - reducer, reducer functions에 의해 state 번환으로 front에서 이미지를 제거 \n    * fetch를 통해서 server 작업 \n      - then에서 작업이 정상 적으로 처리가 되지 않았다면 다시 doLikePhoto를 해준다. </code></pre></div>\n<h2 id=\"component-호출-과정\" style=\"position:relative;\"><a href=\"#component-%ED%98%B8%EC%B6%9C-%EA%B3%BC%EC%A0%95\" aria-label=\"component 호출 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>component 호출 과정</h2>\n<ol>\n<li>\n<p>src/components/App</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. index.js     : mapStateToProps function\n2. container.js : &lt;App {...props}/&gt;; \n3. presenter.js : &lt;Route key=&#39;1&#39; exact path=&#39;/&#39; component={Feed} /&gt;</code></pre></div>\n</li>\n<li>\n<p>src/components/Feed</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. index.js     : mapStateToProps function\n2. container.js : componentWillReceiveProps function\n3. container.js : render function &gt; Feed compoennt presenter 호출\n4. presenter.js : renderFeed function &gt; FeedPhoto component index 호출</code></pre></div>\n</li>\n<li>\n<p>src/components/PhotoActions</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. index.js    : mapDispatchToProps\n2. container.js: render function &gt; PhotoActions component(in presentation)\n3. presenter.js: PhotoActions function\n    * Feed 화면에서 rendering 하는 component로  \n      하트 부분을 업데이트 해야 함으로 &#39;PhotoActions component&#39;를 rerendering 한다.</code></pre></div>\n</li>\n</ol>\n<h2 id=\"indexjs에서-mapdispatchtoprops-두번째-paramownprops에-대해서\" style=\"position:relative;\"><a href=\"#indexjs%EC%97%90%EC%84%9C-mapdispatchtoprops-%EB%91%90%EB%B2%88%EC%A7%B8-paramownprops%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C\" aria-label=\"indexjs에서 mapdispatchtoprops 두번째 paramownprops에 대해서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>index.js에서 mapDispatchToProps 두번째 param(ownProps)에 대해서</h2>\n<ul>\n<li>좋아요 세팅, 해제 할때 PhotoActions > index.js에서 ownProps에 props가 다 담겨져 있다. </li>\n<li>이때 'ownProps'의 값은 PhotoActions component에 property로 값을 세팅한 값이다. </li>\n<li>위 PhotoActions component에 property값을 세팅한 곳은 FeedPhoto > presenter.js 이다.</li>\n</ul>\n<h1 id=\"delete---댓글-삭제하기\" style=\"position:relative;\"><a href=\"#delete---%EB%8C%93%EA%B8%80-%EC%82%AD%EC%A0%9C%ED%95%98%EA%B8%B0\" aria-label=\"delete   댓글 삭제하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>delete - 댓글 삭제하기</h1>\n<ul>\n<li>서버에서 삭제하는 작업은 쉽게 마쳤으나 state관리로 화면을 rerendering하게하는 작업중 한 부분에서 걸려 생각보다 쉽지 않았다. </li>\n<li>먼저 Phtocomments이 컴포넌트는 기능이 없어 index.js에 화면 rendering하는 소스만 있던 것을<br>\nindex.js, container.js, presenter.js으로 나눴다. </li>\n<li>presneter.js에 x 버튼을 달고<br>\nreducer에서 삭제api를 작성한것을 index.js에서 props로 세팅 후 x버튼 클릭식 이벤트로 등록한다.</li>\n<li>\n<p>그리고 <u><strong>여기서 문제</strong></u>가 생겼다.<br>\napi로 component에서 원하는 값(phtoCommentId)을 전달하는 방법을 실습하는 동안에 없어 방법을 고민하다 검색으로 해결 할 수 있었다.   </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">var</span> children <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>childrenData<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">childData<span class=\"token punctuation\">,</span>childIndex</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Child onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChildClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>childData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> text<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>childData<span class=\"token punctuation\">.</span>childText<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/22639534/pass-props-to-parent-component-in-react-js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">참고주소</a></li>\n<li>아래와 같이 컴포넌트 관계가 있다.  </li>\n<li>Explore > Feed > FeedPhoto > photoComments\n여기서 photoComments에서 삭제하는 photoId, photoCommentId를 전달해야만 했다.  </li>\n<li>그래서 photoComments에 photoId를 갖기 위해서 FeedPhotod component에 photoComments컴포넌트에 photoId를 세팅해준다. </li>\n<li>photoCommentId는 이미 PhotoComment component에서 세팅해줬다.<br>\n해줘야 할 것은 api로 전달해야 하는 값을 presneter.js에서 index.js에 reducer api로 전달할 수 있도록 index.js에 전달해줘야 했다. </li>\n</ul>\n</li>\n</ul>","excerpt":"component구조 app.js : router (Explore, Search, Feed) : react-router-dom lib의 'Route, Switch' 사용 Explore Search Feed Loading FeedPhoto…","tableOfContents":"<ul>\n<li><a href=\"/reviewInstaClone/#component%EA%B5%AC%EC%A1%B0\">component구조</a></li>\n<li><a href=\"/reviewInstaClone/#redux-react-%EC%84%A4%EC%A0%95\">redux-react 설정</a></li>\n<li><a href=\"/reviewInstaClone/#retrieve---feedphoto-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-rendering-%EA%B3%BC%EC%A0%95\">retrieve - FeedPhoto 컴포넌트 rendering 과정</a></li>\n<li>\n<p><a href=\"/reviewInstaClone/#create---%EB%8C%93%EA%B8%80-%EB%8B%AC%EA%B8%B0-%EA%B3%BC%EC%A0%95\">create - 댓글 달기 과정</a></p>\n<ul>\n<li><a href=\"/reviewInstaClone/#event-%ED%98%B8%EC%B6%9C\">event 호출</a></li>\n<li><a href=\"/reviewInstaClone/#redux\">redux</a></li>\n<li><a href=\"/reviewInstaClone/#component-%EC%A0%84%EB%8B%AC%EA%B3%BC%EC%A0%95\">component 전달과정</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/reviewInstaClone/#create-delete---like-unlike\">create, delete - like, unlike</a></p>\n<ul>\n<li><a href=\"/reviewInstaClone/#event-%ED%98%B8%EC%B6%9C-1\">event 호출</a></li>\n<li><a href=\"/reviewInstaClone/#redux-1\">redux</a></li>\n<li><a href=\"/reviewInstaClone/#component-%ED%98%B8%EC%B6%9C-%EA%B3%BC%EC%A0%95\">component 호출 과정</a></li>\n<li><a href=\"/reviewInstaClone/#indexjs%EC%97%90%EC%84%9C-mapdispatchtoprops-%EB%91%90%EB%B2%88%EC%A7%B8-paramownprops%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C\">index.js에서 mapDispatchToProps 두번째 param(ownProps)에 대해서</a></li>\n</ul>\n</li>\n<li><a href=\"/reviewInstaClone/#delete---%EB%8C%93%EA%B8%80-%EC%82%AD%EC%A0%9C%ED%95%98%EA%B8%B0\">delete - 댓글 삭제하기</a></li>\n</ul>","fields":{"slug":"/reviewInstaClone/"},"frontmatter":{"title":"Review Instagram clone","date":"May 04, 2020","tags":["review","Instagram clone coding","React","redux"],"keywords":["DEV.HAPPY JYOON","jYoon"]}}},"pageContext":{"slug":"/reviewInstaClone/","series":[]}}}