{"componentChunkName":"component---src-pages-search-tsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"rawMarkdownBody":"\n# CONDITION\n  * 서버는 최대 5개 요청을 처리 할 수 있다. \n  * topEl: 각 요소의 숫자 이하 중요도를 처리 할 수 있다. \n  * processTarget: 서버가 처리할 대상\n\n# STRATEGY\n  * STRATEGY 0. iterator STRATEGY 2, 2.1 till topEl ARRAY\n\n  * STRATEGY 1.0 filter: procesTarget array is filtered by low number of each topEl array element number  \n  * STRATEGY 1.1 slice: server can process reqeust number (5)\n\n  * STRATEGY 2.0 delete processTarget array elements \n              from ARRAY element of STRATEGY 1.1(variable: filteredTS)\n              ( [!] NOT ACCEPT dulicated delete => POINT3 )\n  * STRATEGY 2.1 process during STRATEGY \n                count processed timstamp\n\n# POINT\n  > 아래 코드에 위치 주석 참고 \n\n  ## POINT1\n    * splice에 의해서 첫번째 outer for문에 돌아갔을 때 배열(filteredTS) 값이 바뀐다. \n  ## POINT2\n    * 아래 console에서 topEl요소별로 processTarget값이 나오는것이 아니라\n      topEl요소 배열이 모든 process처리 후의 값이 찍히게 되서 \"slice로 shallow clone\"을 이용\n  ## POINT3\n    * 위단계에서 splice로 삭제 했기 때문에 array 요소가 하나 줄어 들어 줄어든 요소 순서부터 시작하기 위해서 감소 연산자를 사용했다.(for동작에서 j++가 동작하기 때문에 )\n    * eg) 배열을 순회하는 j가 2번째 요소를 제거하면 배열 2번째 요소 뒤에 있는 요소들이 앞으로 당겨진다. == 3번째 요소가 2번재요소가 된다.         \n    이렇게 되면 j는 순회를 2번째 요소부터 해줘야 한다.\n\n\n# CODE\n``` js\n    var processTarget = [3,3,4,9,11,15,28,30];\n    // var processTarget = [3,3,3,3,3,3,3,4,9,11,15,28,30]; // 3*7\n    var topEl = [0,5,5,15];\n    \n    \n    var originProcessTargetArray = processTarget.slice(0);\n    var filteredTS = [];\n    var processedNumber = 0;\n    //STRATEGY 0\n    topEl.forEach( v => {\n      //STRATEGY 1.0, 1.1\n      filteredTS = processTarget.filter( v2 => v2 < v ).sort((a, b) => b-a).slice(0, 5);\n      //count process number\n      processedNumber += filteredTS.length;\n      \n      //STRATEGY 2.0, 2.1\n      var afterDelProcessTargetArray = [];\n      for (var i=0; i < filteredTS.length; i++){\n        var checkDupl = false;\n        for (var j=0; j < processTarget.length; j++){\n          if(!checkDupl && filteredTS[i] === processTarget[j]){\n            //POINT1\n            processTarget.splice(j,1);\n\n            //POINT2\n            afterDelProcessTargetArray = processTarget.slice(0);            \n\n            //POINT3\n            j--;  \n            checkDupl = !checkDupl;\n          }\n        }\n      }\n\n      //* afterDelProcessTargetArray: topEl 요소 별로 processTarget Array\n      //* filteredTS: topEl 요소 별로 server가 처리할 value\n      console.log({originProcessTargetArray, afterDelProcessTargetArray, filteredTS, topEl: v, processedNumber});\n    });\n```\n\n# 결과\n\n![](./serverProcessRequestByPriority_01.png)\n\n","excerpt":"CONDITION 서버는 최대 5개 요청을 처리 할 수 있다.  topEl: 각 요소의 숫자 이하 중요도를 처리 할 수 있다.  processTarget: 서버가 처리할 대상 STRATEGY STRATEGY 0. iterator STRATEGY…","fields":{"slug":"/serverProcessRequestByPriority/"},"frontmatter":{"date":"Jan 19, 2020","title":"server process request by priority","tags":["algorithm"]}}},{"node":{"rawMarkdownBody":"\n# Moving the mouse: mouseover/out, mouseenter/leave 에대해서 설명할 예정입니다.\n\n","excerpt":"Moving the mouse: mouseover/out, mouseenter/leave 에대해서 설명할 예정입니다.","fields":{"slug":"/Moving the mouse(mouseoverout, mouseenter,leave)/"},"frontmatter":{"date":"Jan 17, 2020","title":"first contents","tags":["undefined"]}}},{"node":{"rawMarkdownBody":"\n![](screenshot.png)\n\n이미지 파일이 첨부된 게시물의 예제입니다.\n\n폴더를 만들고 폴더의 제목이 해당 게시물의 주소가 됩니다.\n\n게시물 파일명은 index.md 로 합니다.\n\n이미지 파일은 폴더 내에 위치시킵니다.\n\n자세한 가이드는 [Documents](<https://github.com/junhobaik/junhobaik.github.io/wiki/Document-(Borderless)>)를 확인해주세요.\n","excerpt":"이미지 파일이 첨부된 게시물의 예제입니다. 폴더를 만들고 폴더의 제목이 해당 게시물의 주소가 됩니다. 게시물 파일명은 index.md 로 합니다. 이미지 파일은 폴더 내에 위치시킵니다. 자세한 가이드는 Documents를 확인해주세요.","fields":{"slug":"/image-post-example.md/"},"frontmatter":{"date":"Mar 24, 1991","title":"Image, 이미지 게시물 예제","tags":["undefined"]}}},{"node":{"rawMarkdownBody":"\n게시물에 태그를 지정할 수 있습니다.\n\n해당 게시물의 Markdown YAML Front matter은 아래와 같습니다.\n\n```\n---\ntitle: Tag, 태그 게시물 예제\ndate: 2019-07-30\ntags:\n  - tag\n  - 태그\n---\n```\n\n가이드의 Markdown YAML Front matter를 참고하세요.\n\n자세한 가이드는 [Documents](<https://github.com/junhobaik/junhobaik.github.io/wiki/Document-(Borderless)>)를 확인해주세요.\n","excerpt":"게시물에 태그를 지정할 수 있습니다. 해당 게시물의 Markdown YAML Front matter은 아래와 같습니다. 가이드의 Markdown YAML Front matter를 참고하세요. 자세한 가이드는 Documents를 확인해주세요.","fields":{"slug":"/tag-post-example/"},"frontmatter":{"date":"Mar 24, 1991","title":"Tag, 태그 게시물 예제","tags":["tag","태그"]}}},{"node":{"rawMarkdownBody":"\n블로그를 본인에 맞춰 커스터마이징하려면 우선 config.js의 수정이 필요합니다.\n\n[Documents](<https://github.com/junhobaik/junhobaik.github.io/wiki/Document-(Borderless)>)를 확인해주세요.\n","excerpt":"블로그를 본인에 맞춰 커스터마이징하려면 우선 config.js의 수정이 필요합니다. Documents를 확인해주세요.","fields":{"slug":"/first-post/"},"frontmatter":{"date":"Mar 23, 1991","title":"Borderless Documents","tags":["undefined"]}}}]}},"pageContext":{}}}