{"componentChunkName":"component---src-templates-post-tsx","path":"/동적프로그래밍/","result":{"data":{"markdownRemark":{"html":"<h1 id=\"동적-프로그래밍이란\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%A0%81-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%B4%EB%9E%80\" aria-label=\"동적 프로그래밍이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동적 프로그래밍이란?</h1>\n<ul>\n<li>동적 프로그래밍은 복잡한 문제를 작은 하위 문제들로 나누어 푸는 최적화기법 DFS 알고리즘은 동적프로그밍 기법으로 문제를 해결할 수 있다.</li>\n<li>\n<p>동적 프로그래밍은(병합/퀵 정렬 알고리즘에서 사용했던) 분할/정복과는 전혀 다른 접근 방식이다.</p>\n<ul>\n<li><strong>분할/정복</strong></li>\n<li><u>문제를 독립적인(independent) 하위 문제들로 분할하고 다시 합치는 해결 방식</u></li>\n<li><strong>동적 프로그래밍</strong></li>\n<li><u>종속적인(dependent)하위 문제들로 나눠 해결한다.</u></li>\n<li><u>이 얘기는 재귀호출로 스택을 쌓아서 각 스택별로 process를 처리하면서 각 스택의 return 값을 다음 스택(호출한 함수 프로세스)으로 넘겨서 문제를 해결하는 형식 같다.</u></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"동적-프로그래밍을-사용해-문제를-해결할-때-중요한-세단계\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%A0%81-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%B4-%EB%AC%B8%EC%A0%9C%EB%A5%BC-%ED%95%B4%EA%B2%B0%ED%95%A0-%EB%95%8C-%EC%A4%91%EC%9A%94%ED%95%9C-%EC%84%B8%EB%8B%A8%EA%B3%84\" aria-label=\"동적 프로그래밍을 사용해 문제를 해결할 때 중요한 세단계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동적 프로그래밍을 사용해 문제를 해결할 때 중요한 세단계</h1>\n<ol>\n<li>하위 문제들을 정의한다.</li>\n<li>하위 문제들을 풀기위한 '재귀를 구현'한다.</li>\n<li>베이스 케이스를 찾아낸다.<sup id=\"fnref-basecase\"><a href=\"#fn-basecase\" class=\"footnote-ref\">basecase</a></sup></li>\n</ol>\n<h1 id=\"동적-프로그래밍-방식으로-해결한-유명한-알고리즘-문제들\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%A0%81-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EB%B0%A9%EC%8B%9D%EC%9C%BC%EB%A1%9C-%ED%95%B4%EA%B2%B0%ED%95%9C-%EC%9C%A0%EB%AA%85%ED%95%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%AC%B8%EC%A0%9C%EB%93%A4\" aria-label=\"동적 프로그래밍 방식으로 해결한 유명한 알고리즘 문제들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동적 프로그래밍 방식으로 해결한 유명한 알고리즘 문제들</h1>\n<ol>\n<li>\n<p>배낭문제</p>\n<ul>\n<li>짐 무게의 최댓값이 정해져 '배낭'에 일정가치와 무게의 집들을 넣을 때 가지츼 총합을 최대로 할 방법</li>\n</ul>\n</li>\n<li>\n<p>최장공통부분수열(LCS, longest common subsequence)</p>\n<ul>\n<li>다수의 수열 모두의 부분수열이 되는 수열 중에 가장 긴 것(남아 있는 원소의 순서를 바꾸지 않은 채 일부 원소를 삭제하든지 하여 다른 수열로부터 파생 가능한 수열)을 찾는 문제</li>\n</ul>\n</li>\n<li>\n<p>행렬 연쇄 곱셈(matrix chain multiplication)</p>\n<ul>\n<li>행렬 집합에서 가장 효율적(가장 적은 연산)으로 행렬들을 곱하는 곱셈 순서 조합을 찾는 것</li>\n</ul>\n</li>\n<li>\n<p>동전 교환</p>\n<ul>\n<li>정해진 금액을 동전(d1, d2, d3, ... dn)으로 바궈주는 경우의 수</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h1>\n<p>자바스크립트 자료 구조와 알고리즘 - 에이콘</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-basecase\">\n<p>재귀 호출을 멈추는 조건(중단점)</p>\n<a href=\"#fnref-basecase\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","excerpt":"동적 프로그래밍이란? 동적 프로그래밍은 복잡한 문제를 작은 하위 문제들로 나누어 푸는 최적화기법 DFS…","tableOfContents":"<ul>\n<li><a href=\"/%EB%8F%99%EC%A0%81%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/#%EB%8F%99%EC%A0%81-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%B4%EB%9E%80\">동적 프로그래밍이란?</a></li>\n<li><a href=\"/%EB%8F%99%EC%A0%81%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/#%EB%8F%99%EC%A0%81-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%B4-%EB%AC%B8%EC%A0%9C%EB%A5%BC-%ED%95%B4%EA%B2%B0%ED%95%A0-%EB%95%8C-%EC%A4%91%EC%9A%94%ED%95%9C-%EC%84%B8%EB%8B%A8%EA%B3%84\">동적 프로그래밍을 사용해 문제를 해결할 때 중요한 세단계</a></li>\n<li><a href=\"/%EB%8F%99%EC%A0%81%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/#%EB%8F%99%EC%A0%81-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EB%B0%A9%EC%8B%9D%EC%9C%BC%EB%A1%9C-%ED%95%B4%EA%B2%B0%ED%95%9C-%EC%9C%A0%EB%AA%85%ED%95%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%AC%B8%EC%A0%9C%EB%93%A4\">동적 프로그래밍 방식으로 해결한 유명한 알고리즘 문제들</a></li>\n<li><a href=\"/%EB%8F%99%EC%A0%81%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>","fields":{"slug":"/동적프로그래밍/"},"frontmatter":{"title":"동적프로그래밍 설명","date":"Mar 19, 2020","tags":["algorithm"],"keywords":["동적프로그래밍"]}}},"pageContext":{"slug":"/동적프로그래밍/","series":[]}}}